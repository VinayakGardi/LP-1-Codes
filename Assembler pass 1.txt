table ::


import java.util.ArrayList;
import java.util.List;


public class Table {

	public static final List<MOT> mot = new ArrayList<MOT>();
	public static final List<POT> pot = new ArrayList<POT>();
	public static final List<RT> rt = new ArrayList<RT>();
	public static final List<CCBCI> ccbci = new ArrayList<CCBCI>();

	static {
		mot.add(new MOT("STOP", 0, 1));
		mot.add(new MOT("ADD", 1, 1));
		mot.add(new MOT("SUB", 2, 1));
		mot.add(new MOT("MUL", 3, 1));
		mot.add(new MOT("MOVER", 4, 1));
		mot.add(new MOT("MOVEM", 5, 1));
		mot.add(new MOT("COMP", 6, 1));
		mot.add(new MOT("BC", 7, 1));
		mot.add(new MOT("DIV", 8, 1));
		mot.add(new MOT("READ", 9, 1));
		mot.add(new MOT("PRINT", 10, 1));

		pot.add(new POT("START", 1));
		pot.add(new POT("END", 2));
		pot.add(new POT("ORIGIN", 3));
		pot.add(new POT("EQU", 4));
		pot.add(new POT("LTORG", 5));
		pot.add(new POT("DC", 2));
		pot.add(new POT("DS", 1));

		rt.add(new RT("AREG", 1));
		rt.add(new RT("BREG", 2));
		rt.add(new RT("CREG", 3));
		rt.add(new RT("DREG", 4));

		ccbci.add(new CCBCI("LT", 1));
		ccbci.add(new CCBCI("LE", 2));
		ccbci.add(new CCBCI("EQ", 3));
		ccbci.add(new CCBCI("GT", 4));
		ccbci.add(new CCBCI("GE", 5));
		ccbci.add(new CCBCI("NE", 6));
	}

	public static final void print() {
		System.out.println("\nMOT");
		System.out.printf("%10s %10s %10s\n", "Mnemonic", "Opcode", "Length");
		System.out.println("-----------------------------------------------");
		for (MOT m : mot) {
			System.out.printf("%10s %10s %10s\n", m.mnemonicOc, m.mcCode, m.length);
		}
		System.out.println("\nPOT");
		System.out.printf("%10s %10s\n", "Pseudo", "M/c Code");
		System.out.println("-----------------------------------------------");
		for (POT m : pot) {
			System.out.printf("%10s %10s\n", m.pseudoOc, m.mcCode);
		}
		System.out.println("\nRT");
		System.out.printf("%10s %10s\n", "Regname", "M/c Code");
		System.out.println("-----------------------------------------------");
		for (RT m : rt) {
			System.out.printf("%10s %10s\n", m.regName, m.mcCode);
		}
		System.out.println("\nCCBCI");
		System.out.printf("%10s %10s\n", "Condition", "M/c Code");
		System.out.println("-----------------------------------------------");
		for (CCBCI m : ccbci) {
			System.out.printf("%10s %10s\n", m.cond, m.mcCode);
		}
	}

	public static final class MOT {
		public String mnemonicOc;
		public int mcCode;
		public int length;

		public MOT(String mnemonicOc, int mcCode, int length) {
			this.mnemonicOc = mnemonicOc;
			this.mcCode = mcCode;
			this.length = length;
		}

		@Override
		public String toString() {
			return mnemonicOc;
		}

		public static MOT getByValue(String value) {
			for (MOT p : mot) {
				if (p.mnemonicOc.equals(value))
					return p;
			}
			return null;
		}

		public static MOT[] toArray() {
			return mot.toArray(new MOT[mot.size()]);
		}
	}

	public static final class POT {
		public String pseudoOc;
		public int mcCode;

		public POT(String pseudoOc, int mcCode) {
			this.pseudoOc = pseudoOc;
			this.mcCode = mcCode;
		}

		public static POT getByValue(String value) {
			for (POT p : pot) {
				if (p.pseudoOc.equals(value))
					return p;
			}
			return null;
		}

		public static POT[] toArray() {
			return pot.toArray(new POT[pot.size()]);
		}

		@Override
		public String toString() {
			return pseudoOc;
		}

	}

	public static final class RT {
		public String regName;
		public int mcCode;

		public RT(String regName, int mcCode) {
			this.regName = regName;
			this.mcCode = mcCode;
		}

		public static RT getByValue(String value) {
			for (RT p : rt) {
				if (p.regName.equals(value))
					return p;
			}
			return null;
		}
	}

	public static final class CCBCI {
		public String cond;
		public int mcCode;

		public CCBCI(String cond, int mcCode) {
			this.cond = cond;
			this.mcCode = mcCode;
		}

	}

}


tableout::


import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class TableOut {

	public static int locCntr = 0;
	public static int pooltabPtr = 0;
	public static int littabPtr = 0;
	public static int symtabPtr = 0;

	public static final List<SymTab> symtab = new ArrayList<SymTab>();
	public static final List<LitTab> littab = new ArrayList<LitTab>();
	public static final List<Integer> pooltab = new ArrayList<Integer>();
	public static final List<Out> out = new ArrayList<Out>();

	static {
		pooltab.add(1);
	}

	public static void print() throws IOException {
		System.out.println("\nLocation Counter: " + locCntr);
		System.out.println("Pooltab Pointer: " + pooltabPtr);
		System.out.println("Literal Tab Pointer: " + littabPtr);
		System.out.println("Symbol Table Pointer: " + symtabPtr);
		System.out.println("\nOut");
		System.out.printf("%15s %10s %10s %10s\n", "L/c Value", "Ic for Opcode", "Op1", "Ic for op2");
		System.out.println("-----------------------------------------------");
		
		
		File f = new File("output.txt");
		BufferedWriter bw =null;
		
		for (Out m : out) {
			FileWriter fw=new FileWriter(f,true);
			bw=new BufferedWriter(fw);
			
			System.out.printf("%10s %10s %10s %10s\n", m.value, m.icOpcode, m.op1, m.ic2);
			
			bw.write(m.value+"|"+m.icOpcode+"|"+m.op1+"|"+m.ic2+"\n");
			bw.close();
			
		}
		
		
		
		
		
		
		System.out.println("\nSymbol Table");
		System.out.printf("%10s %10s %10s\n", "name", "address", "length");
		System.out.println("-----------------------------------------------");
		for (SymTab m : symtab) {
			System.out.printf("%10s %10s %10s\n", m.name, m.address, m.length);
		}
		System.out.println("\nLiteral Table");
		System.out.printf("%10s %10s %10s\n", "literal no", "literal", "address");
		System.out.println("-----------------------------------------------");
		for (LitTab m : littab) {
			System.out.printf("%10s %10s %10s\n", m.litNo, m.literal, m.address);
		}
		System.out.println("\nPool Table");
		System.out.printf("%10s\n", "Pool no");
		System.out.println("-----------------------------------------------");
		for (Integer m : pooltab) {
			System.out.printf("%10s\n", m);
		}
	}

	public static final class SymTab {
		public String name;
		public int address;
		public int length;

		public SymTab(String name, int address, int length) {
			this.name = name;
			this.address = address;
			this.length = length;
		}

		public static SymTab getByValue(String value) {
			for (SymTab p : symtab) {
				if (p.name.equals(value))
					return p;
			}
			return null;
		}

		public static String[] toArray() {
			List<String> list = new ArrayList<String>();
			for (SymTab smt : symtab) {
				if (smt.length == -1)
					list.add(smt.name);
			}
			return list.toArray(new String[list.size()]);
		}		
	}

	public static final class LitTab {
		public int litNo;
		public int literal;
		public int address;

		public LitTab(int litNo, int literal, int address) {
			this.litNo = litNo;
			this.literal = literal;
			this.address = address;
		}

		public static LitTab getByValue(int value, int no) {
			for (LitTab p : littab) {
				if (p.literal == value && p.litNo >= no)
					return p;
			}
			return null;
		}
	}

	public static final class Out {
		public int value;
		public String icOpcode;
		public int op1;
		public String ic2;

		public Out(int value, String icOpcode, int op1, String ic2) {
			this.value = value;
			this.icOpcode = icOpcode;
			this.op1 = op1;
			this.ic2 = ic2;
		}
	}
	
}


tok::

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.StringTokenizer;

public class tok {

	public static void main(String[] args) throws IOException {
		Scanner sc = new Scanner(new FileInputStream("input.txt"));
		List<Line> lines = new ArrayList<Line>();
		while (true) {
			Line mt = new Line(sc.nextLine());
			lines.add(mt);
			System.out.println(Arrays.asList(mt.tokens));
			if (mt.tokens[0].equals("END"))
				break;
		}
		pass1(lines);
	}

	public static void pass1(List<Line> lines) throws IOException {
		for (Line line : lines) {
			String label = null;
			do {
				if (!line.equalsFirst("EQU"))
					label = null;
				if (line.equalsFirst("START")) {
					TableOut.locCntr = Integer.parseInt(line.tokens[1]);
					TableOut.out.add(new TableOut.Out(0, "(AD, 01)", 0, "(C, " + TableOut.locCntr + ")"));					
				} else if (line.equalsFirst("ORIGIN")) {
					String[] splits = line.tokens[1].split("\\+");
					int address = TableOut.SymTab.getByValue(splits[0]).address;
					TableOut.locCntr = address + Integer.parseInt(splits[1]);					
				} else if (line.equalsFirst("LTORG")) {
					int count = 0;
					for (TableOut.LitTab lt : TableOut.littab) {
						TableOut.out.add(new TableOut.Out(TableOut.locCntr, "(AD, 05)", 0, "" + lt.literal));
						lt.address = TableOut.locCntr++;						
						count++;						
					}
					TableOut.pooltab.add(count + 1);						
				} else if (line.equalsFirst("EQU")) {
					int address = TableOut.SymTab.getByValue(line.tokens[1]).address;
					TableOut.SymTab.getByValue(label).address = address;
					label = null;
				} else if (line.equalsFirst((Object[]) TableOut.SymTab.toArray())) {
					if (line.tokens[1].equals("DS")) {
						int length = Integer.parseInt(line.tokens[2]);
						TableOut.SymTab smt = TableOut.SymTab.getByValue(line.tokens[0]);
						smt.address = TableOut.locCntr;
						smt.length = length;
						TableOut.out.add(new TableOut.Out(TableOut.locCntr, "(DL, 01)", 0, "(C, 2)"));
						TableOut.locCntr += length;
					} else if (line.tokens[1].equals("DC")) {
						int length = 1;
						TableOut.SymTab smt = TableOut.SymTab.getByValue(line.tokens[0]);
						smt.address = TableOut.locCntr;
						smt.length = length;
						TableOut.out.add(new TableOut.Out(TableOut.locCntr, "(DL, 02)", 0, "(C, 3)"));
						TableOut.locCntr += length;
					}
				} else if (line.equalsFirst("END")) {
					int start = TableOut.pooltab.get(TableOut.pooltab.size() - 1);					
					for (TableOut.LitTab lt : TableOut.littab) {
						if (lt.litNo >= start) {
							TableOut.out.add(new TableOut.Out(TableOut.locCntr, "(AD, 02)", 0, "" + lt.literal));
							lt.address = TableOut.locCntr++;						
						}
					}					
				} else if (line.equalsFirst((Object[]) Table.MOT.toArray())) {
					int code = Table.MOT.getByValue(line.tokens[0]).mcCode;
					if (line.tokens[2].startsWith("=")) {
						int literal = Integer.parseInt(line.tokens[2].substring(2, line.tokens[2].length() - 1));
						TableOut.LitTab lt = TableOut.LitTab.getByValue(literal, TableOut.pooltab.get(TableOut.pooltab.size() - 1));
						if (lt == null) {
							TableOut.littab.add(lt = new TableOut.LitTab(++TableOut.littabPtr, literal, -1));	
						}			
						if (lt.litNo >= TableOut.pooltab.get(TableOut.pooltab.size() - 1))
							lt.address = TableOut.locCntr;
						int opcode = Table.RT.getByValue(line.tokens[1]).mcCode;
						TableOut.out.add(new TableOut.Out(TableOut.locCntr, "(IS, " + code + ")", opcode, "(L, " + TableOut.littabPtr + ")"));
					} else {
						String symbol = line.tokens[2];
						TableOut.SymTab smt = TableOut.SymTab.getByValue(symbol);
						if (smt == null) {
							TableOut.symtab.add(smt = new TableOut.SymTab(symbol, TableOut.locCntr, -1));
							TableOut.symtabPtr++;
						}
						int index = TableOut.symtab.indexOf(smt) + 1;
						int opcode = Table.RT.getByValue(line.tokens[1]).mcCode;
						TableOut.out.add(new TableOut.Out(TableOut.locCntr, "(IS, " + code + ")", opcode, "(S, " + index + ")"));
					}
					TableOut.locCntr++;
				} else {
					TableOut.symtab.add(new TableOut.SymTab(line.tokens[0], TableOut.locCntr, 1));
					TableOut.symtabPtr++;
					label = line.remove(0);
				}
			} while (label != null);
		}

		TableOut.print();
	}

	public static final class Line {
		private String str;
		private String[] tokens;

		public Line(String str) {
			this.str = str;
			form();
		}

		private void form() {
			StringTokenizer st = new StringTokenizer(str, " ,\t");
			List<String> tokens = new ArrayList<String>();
			while (st.hasMoreTokens()) {
				tokens.add(st.nextToken().replaceAll("\\s+", ""));
			}
			this.tokens = tokens.toArray(new String[tokens.size()]);
		}

		public boolean equalsFirst(Object... str) {
			for (Object s : str) {
				if (tokens[0].equalsIgnoreCase(s.toString()))
					return true;
			}
			return false;
		}

		public String remove(int i) {
			List<String> tokens = new ArrayList<String>(Arrays.asList(this.tokens));
			String s = tokens.remove(i);
			this.tokens = tokens.toArray(new String[tokens.size()]);
			return s;
		}

		public void display() {
			for (int i = 0; i < tokens.length; i++) {
				System.out.println(i + ": " + tokens[i]);
			}
		}

	}

}

